configfile: workflow.current_basedir + "/config.yaml"

##### Configuration #####
BARCODES = config["barcodes"].split(",")

##### Target rules #####

rule all:
    input:
        expand(config["output_path"] + "binned/barcode_{barcode}/list_binned_fastq", barcode=BARCODES),
        expand(config["output_path"] + "assembled/barcode_{barcode}/list_assembled_fastq", barcode=BARCODES),

rule bin_barcode_by_taxid:
    input:
        config["output_path"] + "binned/barcode_{barcode}/config.yaml"
    params:
        path_to_script= workflow.current_basedir,
        output_path= config["output_path"],
        min_length = config["min_length"],
        max_length = config["max_length"],
        kraken_fasta = config["kraken_fasta"],
        barcode = "{barcode}"
    output:
        config["output_path"] + "binned/barcode_{barcode}/list_binned_fastq"
    shell:
        """
        snakemake --nolock --snakefile {params.path_to_script}/rules/bin.smk \
        --configfile {input} \
        --config \
        output_path={params.output_path} \
        min_length={params.min_length} \
        max_length={params.max_length} \
        kraken_fasta={params.kraken_fasta} \
        barcode={params.barcode}
        """

rule assemble_barcode_by_taxid:
    input:
        config["output_path"] + "binned/barcode_{barcode}/config.yaml"
    params:
        path_to_script= workflow.current_basedir,
        output_path= config["output_path"],
        barcode = "{barcode}"
    output:
        config["output_path"] + "assembled/barcode_{barcode}/list_assembled_fastq"
    shell:
        """
        snakemake --nolock --snakefile {params.path_to_script}/rules/consensus2.smk \
        --configfile {input} \
        --config \
        output_path={params.output_path} \
        barcode={params.barcode}
        """

##### Modules #####
include: "rules/identify.smk"
