
##### Configuration #####

# trim trailing slashes from paths to avoid snakemake complaining of double '/' in paths
config["output_path"] = config["output_path"].rstrip("/")
config["input_path"] = config["input_path"].rstrip("/")

if config["kraken_db"][0] != "/":
    config["kraken_db"] = workflow.basedir + "/../../" + config["kraken_db"]

# todo - check that 'barcode_set' is one of 'native', 'rapid', `pcr` or 'all' and throw error if not
barcode_set = " --native_barcodes"
if str(config["barcode_set"]).lower()=="native":
    barcode_set= " --native_barcodes"
elif str(config["barcode_set"]).lower()=="rapid":
    barcode_set= " --rapid_barcodes"
elif str(config["barcode_set"]).lower()=="pcr":
    barcode_set=" --pcr_barcodes"
elif str(config["barcode_set"]).lower()=="all":
    barcode_set=""

# todo - check that the barcode labels fit the required format (text followed by an integer)
limit_barcodes_to = ""
try:
    barcodes = config["limit_barcodes_to"].split(',')
    barcode_string = ""
    for i in barcodes:
        barcode_string+=" {}".format(i.lstrip("NB").lstrip("BC").lstrip("barcode"))
    barcodes.append('none')
    limit_barcodes_to = " --limit_barcodes_to {}".format(barcode_string)
except:
    barcodes = ["none"]
barcode_string_with_none = ""
for i in barcodes:
    barcode_string_with_none+=" {}".format(i)

reference_fields = config["reference_fields"] if config.get("reference_fields") else ""

discard_unassigned = ""
if str(config["discard_unassigned"]).lower()=="true":
    discard_unassigned= " --discard_unassigned"
else:
    discard_unassigned= ""

# todo - check that the value is true or false
require_two_barcodes = ""
if str(config["require_two_barcodes"]).lower()=="false":
    require_two_barcodes= ""
else:
    require_two_barcodes= " --require_two_barcodes"

# todo - check that the value is true or false
split_reads = ""
if str(config["split_reads"]).lower()=="true":
    split_reads= ""
else:
    split_reads= " --no_split"

# todo - check that the value is true or false
discard_middle = ""
if str(config["discard_middle"]).lower()=="true":
    discard_middle= " --discard_middle"
else:
    discard_middle= ""

##### Target rules #####

rule all:
    input:
        expand(config["output_path"]+ "/{filename_stem}.csv", filename_stem=config["filename_stem"]),
        expand(config["output_path"]+ "/classified/barcode_{barcode}/{filename_stem}.kraken", filename_stem=config["filename_stem"], barcode=barcodes)

##### Modules #####
include: "rules/demultiplex.smk"
include: "rules/map.smk"
include: "rules/classify.smk"

